name: Build

on:
  push:
  workflow_dispatch:

jobs:
  # =========================================================
  # Build Job
  # =========================================================
  build:
    name: CMake - ${{ matrix.platform[0] }} - ${{ matrix.platform[2] }} - ${{ matrix.platform[3] }}
    runs-on: ${{ matrix.platform[1] }}
    strategy:
      matrix:
        platform:
          - [windows, windows-latest, msvc, Debug, msvc, AMD64]
          - [windows, windows-latest, msvc, Release, msvc, AMD64]
          - [windows, windows-latest, gnu, Debug, gnu, AMD64]
          - [windows, windows-latest, gnu, Release, gnu, AMD64]
          - [linux, ubuntu-latest, gnu, Debug, gnu, x86_64]
          - [linux, ubuntu-latest, gnu, Release, gnu, x86_64]
          - [linux, ubuntu-latest, clang, Debug, clang, x86_64]
          - [linux, ubuntu-latest, clang, Release, clang, x86_64]
    env:
      OPERATING_SYSTEM: ${{ matrix.platform[0] }}
      DISTRIBUTION: ${{ matrix.platform[1] }}
      COMPILER: ${{ matrix.platform[2] }}
      BUILD_TYPE: ${{ matrix.platform[3] }}
      COMPILER_ID: ${{ matrix.platform[4] }}
      ARCH: ${{ matrix.platform[5]}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        if: env.COMPILER == 'clang'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Configure
        shell: bash
        run: |
          if [ "${{ env.COMPILER }}" == "msvc" ]; then
            cmake -S . -B out/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -DWARNINGS_AS_ERRORS=ON
          elif [ "${{ env.COMPILER }}" == "clang-cl" ]; then
            cmake -S . -B out/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -T ClangCL #TODO: -DWARNINGS_AS_ERRORS=ON
          elif [ "${{ env.COMPILER }}" == "clang" ]; then
            cmake -S . -B out/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DWARNINGS_AS_ERRORS=ON
          elif [ "${{ env.COMPILER }}" == "gnu" ]; then
            cmake -S . -B out/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_CXX_COMPILER=g++ -DWARNINGS_AS_ERRORS=ON
          fi

      - name: Build
        run: cmake --build out/build --parallel --config ${{ env.BUILD_TYPE }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.3.0
        with:
          name: ${{ env.OPERATING_SYSTEM }}-${{ env.ARCH }}-${{ env.COMPILER }}-${{ env.BUILD_TYPE }}-bin
          path: out/build/bin/
          
  # =========================================================
  # Clang Format Job
  # =========================================================
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: find src \( -name '*.cpp' -o -name '*.hpp' \) -exec clang-format -Werror --style=file -n {} + || (echo "Clang-format failed!" && exit 1)
  
  # =========================================================
  # Clang Tidy Job
  # =========================================================
  clang-tidy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Static code analysis
        run: |
          cmake -S . -B out/build -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCMAKE_CC=clang -DCMAKE_CXX=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_COMPILER_TARGET=x86_64-pc-linux-gnu -DCMAKE_C_COMPILER_TARGET=x86_64-pc-linux-gnu -DWARNINGS_AS_ERRORS=ON
          cmake --build out/build --parallel --config Debug
